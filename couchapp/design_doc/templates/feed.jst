<!DOCTYPE html>
<html>
<head>
<title>{{!it.feed.title}} &ndash; README</title>
{{##def.root:../#}}{{#def.header}}
<style>
dt {
	font-family: 'Playfair Display', serif;
	font-size: 18px;
}
.button, dd {
	font-family: "DejaVu Sans", sans-serif;
	font-size: 12px;
}

.buttonList {
	display: block;
	width: 100%;
	text-align: center;
	max-width: 400px;
	margin-left: auto;
	margin-right: auto;
}
.buttonList .button:first-child {
	border-top-left-radius: 5px;
	border-top-right-radius: 5px;
}
.buttonList .button:last-child {
	border-bottom-left-radius: 5px;
	border-bottom-right-radius: 5px;
}
.buttonList .button+.button {
	border-top: none;
}

.button {
	display: block;
	width: 100%;
	background: none;
	padding: 0;
	border: 1px solid #B0D1FF;
	line-height: 40px;
	font-weight: normal;
	cursor: pointer;
}
.button:focus, .button:hover {
	font-weight: bold;
}
.button:active, .button.selected {
	background: #B0D1FF;
	color: white;
	font-weight: bold;
}

.button.buttonDanger {
	border-color: #ED4337;
}
.button.buttonDanger:active, .button.buttonDanger.selected {
	background: #ED4337;
}

.feedImage {
	border-radius: 5px;
	overflow: hidden;
	box-shadow: 0px 0px 2px rgba(0,0,0,0.1);
	max-width: 100%;
	max-height: 200px;
}
</style>
</head>
<body>
<div class="header"><h1>{{!it.feed.title||it.feed.feed}}</h1><h2>Configuration</h2></div>
<div class="content">
<dl>
{{?it.feed.title}}<dt>Title</dt><dd>{{!it.feed.title}}</dd>{{?}}
{{?it.feed.description}}<dt>Description</dt><dd>{{!it.feed.description}}</dd>{{?}}
{{?it.feed.link}}<dt>Web page</dt><dd><a href="{{!it.feed.link}}">{{!it.feed.link}}</a></dd>{{?}}
{{?it.feed.feed}}<dt>Cannonical feed URL</dt><dd><a href="{{!it.feed.feed}}">{{!it.feed.feed}}</a></dd>{{?}}
{{?it.feed.image && it.feed.image.url}}
	<dt>Image</dt>
	<dd><img
		class="feedImage"
		src="{{!it.feed.image.url}}"
		{{?it.feed.image.title}}title="{{!it.feed.image.title}}"{{?}}
	></dd>
{{?}}
</dl>
<div id="feed-config">{{=it.feed_config}}</div>
</div>
<div id="articles" class="content">
<h1>Recent posts</h1>
{{=it.articles}}
</div>
<script src="../all.js"></script>
<script>
var React = require('lib/react');
var FeedConfig = require('lib/component/feed-config');

var feed = {{=JSON.stringify(it.feed)}};

var saveTimeout = 250;
var pendingSave = null;
var saveInProgress = false;
var dirty = false;

window.addEventListener("beforeunload", function (e) {
	if (pendingSave || saveInProgress || dirty) {
		e.returnValue = "Your changes have not been saved. Do you still want to leave the page?";
		return e.returnValue;
	}
});

function save() {
	pendingSave = null;
	saveInProgress = true;
	dirty = false;

	var xhr = new XMLHttpRequest();
	xhr.open("POST", "");
	xhr.setRequestHeader('content-type', 'application/json');
	xhr.onload = function () {
		saveInProgress = false;
		if (dirty) pendingSave = setTimeout(save, saveTimeout);
	};
	xhr.send(JSON.stringify(feed));
}

function setItem(key, value) {
	feed[key] = value;

	dirty = true;
	if (pendingSave) cancelTimeout(pendingSave);
	if (!saveInProgress) pendingSave = setTimeout(save, saveTimeout);

	render();
}

function deleteAll(items, callback) {
	var xhr = new XMLHttpRequest();
	xhr.open("POST", "../_bulk_docs");
	xhr.setRequestHeader("Content-Type", "application/json");
	xhr.onload = function () {
		if (xhr.status >= 400) return callback(new Error("Unexpected status code: " + xhr.status));
		callback();
	};
	xhr.onerror = function () { callback(new Error("Network error")); };
	xhr.send(JSON.stringify({
		docs: items.map(function (x) { return { _id: x.id, _rev: x.rev, _deleted: true }; })
	}));
}

function unsubscribe(callback) {
	var xhr = new XMLHttpRequest();
	xhr.open("GET", window.location + "/all");
	xhr.onload = function () {
		if (xhr.status >= 400) return callback(new Error("Unexpected status code: " + xhr.status));
		var allItems = JSON.parse(xhr.responseText);
		deleteAll(allItems, callback);
	};
	xhr.onerror = function () { callback(new Error("Network error")); };
	xhr.send();
}

function performUnsubscribe() {
	unsubscribe(function (err) {
		if (err) {
			console.error(err.stack);
			return;
		}
		console.log("Successfully unsubscribed");
		window.location.href = "../feeds";
	});
}

function render() {
	React.render(
		React.createElement(FeedConfig, {
			feed: feed,
			setItem: setItem,
			unsubscribe: performUnsubscribe
		}),
		document.getElementById("feed-config")
	);
}

render();
</script>
{{#def.mark_as_read_script}}
</body>
</html>
